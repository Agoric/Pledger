# NOTE: Secrets need to be synchronized with packages/app-electron/package.json
name: Release
on:
  push:
    # branches: [master] # just for testing.
    tags:
      - 'v*'
      
jobs:

  publish_on_linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2       
    - uses: actions/setup-node@master
      with:
        node-version: 12
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.15.0'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: install dependencies
      env:
        # We need this to prevent conflicting binary downloads.
        # (One for packages/app-electron, and one for packages/plugin-agoric-app)
        ELECTRON_SKIP_BINARY_DOWNLOAD: true
      run: yarn install
    - name: download electron
      # Now do the binary download once.
      run: node packages/app-electron/node_modules/electron/install.js
    - name: build binaries
      run: yarn build
    - name: install snapcraft
      run: |-
        sudo snap install snapcraft --classic
        sudo snap install review-tools
    - name: build electron packages
      env:
        SNAPCRAFT_BUILD_ENVIRONMENT: host
      run: cd packages/app-electron && yarn publish:electron --dry-run
    - name: publish electron packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cd packages/app-electron && yarn publish:electron --from-dry-run
    - name: login to snapcraft
      env:
        # This $SNAPCRAFT_TOKEN comes from:
        # snapcraft export-login --snaps pledger --channels beta,edge -
        SNAPCRAFT_TOKEN: ${{ secrets.SNAPCRAFT_TOKEN }}
      run: echo "$SNAPCRAFT_TOKEN" | snapcraft login --with -
    - name: publish to snapcraft
      # Use just "edge" channel for releases containing '-', "beta,edge" otherwise.
      run: |-
        cd packages/app-electron
        release=$(node -e "console.log(/-/.test(JSON.parse(require('fs').readFileSync('./package.json','utf-8')).version)?'edge':'beta,edge')")
        snapcraft upload --release=$release out/make/*.snap

  publish_on_mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@master
      with:
        node-version: 12
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.15.0'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: install dependencies
      run: yarn install
    - name: build binaries
      run: yarn build
    - name: install signing identity
      env:
        # This APPLE_DEVELOPER_KEY_P12 comes from:
        # keychain export devkey.p12 with password $APPLE_DEVELOPER_PWD
        # Then: base64 devkey.p12
        APPLE_DEVELOPER_KEY_P12: ${{ secrets.APPLE_DEVELOPER_KEY_P12 }}
        APPLE_DEVELOPER_PWD: ${{ secrets.APPLE_DEVELOPER_PWD }}
        # This incantation was gleaned from
        # https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      run: |-
        security create-keychain -p "$APPLE_DEVELOPER_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$APPLE_DEVELOPER_PWD" build.keychain
        echo "$APPLE_DEVELOPER_KEY_P12" | base64 -d > ~/DeveloperKey.p12
        security import ~/DeveloperKey.p12 -k build.keychain -P "$APPLE_DEVELOPER_PWD" -T /usr/bin/codesign
        rm ~/DeveloperKey.p12
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_DEVELOPER_PWD" build.keychain
    - name: install notarize auth key
      env:
        # This APPLE_NOTARIZE_AUTHKEY comes from
        APPLE_NOTARIZE_AUTHKEY: ${{ secrets.APPLE_NOTARIZE_AUTHKEY }}
        # This APPLE_NOTARIZE_FILE is something like AuthKey_FOOBAR.p8
        APPLE_NOTARIZE_FILE: ${{ secrets.APPLE_NOTARIZE_FILE }}
      run: |-
        mkdir -p -m0700 ~/.private_keys
        echo "$APPLE_NOTARIZE_AUTHKEY" > ~/.private_keys/"$APPLE_NOTARIZE_FILE"
    - name: build electron packages
      run: cd packages/app-electron && yarn publish:electron --dry-run
    - name: publish electron packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cd packages/app-electron && yarn publish:electron --from-dry-run

  publish_on_win:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2       
    - uses: actions/setup-node@master
      with:
        node-version: 12
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.15.0'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: install dependencies
      run: yarn install
    - name: build binaries
      run: yarn build
    - name: install signing identity
      env:
        # Obtained by exporting Sectigo key from certmgr to devkey.pfx
        # base64 < devkey.pfx
        WINDOWS_DEVELOPER_KEY_PFX: ${{ secrets.WINDOWS_DEVELOPER_KEY_PFX }}
        WINDOWS_DEVELOPER_PWD: ${{ secrets.WINDOWS_DEVELOPER_PWD }}
      run: |-
        $DevPassword = ConvertTo-SecureString $env:WINDOWS_DEVELOPER_PWD -AsPlainText -Force
        $Content = [System.Convert]::FromBase64String($env:WINDOWS_DEVELOPER_KEY_PFX)
        Set-Content -Path $env:temp\devkey.pfx -Value $Content -AsByteStream
        Import-PfxCertificate -Password $DevPassword -FilePath $env:temp\devkey.pfx -CertStoreLocation Cert:\CurrentUser\My
        Remove-Item $env:temp\devkey.pfx
    - name: build electron packages
      run: cd packages/app-electron && yarn publish:electron --dry-run
    - name: publish electron packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cd packages/app-electron && yarn publish:electron --from-dry-run
